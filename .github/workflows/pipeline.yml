name: Continuous Integration

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Build Docker image
        run: |
          docker build -t my-express-app:latest .

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image
        run: |
          docker tag my-express-app:latest ${{ secrets.DOCKER_USERNAME }}/my-express-app:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/my-express-app:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy CloudFormation Stack
        run: |
          aws cloudformation deploy \
          --stack-name my-stack-name \
          --template-file ./ecs-setup.json \
          --parameter-overrides \
            DockerHubRepository=${{ secrets.DOCKER_REPOSITORY }} \
            VpcId=${{ secrets.VPC_ID }} \
            SubnetIds=${{ secrets.SUBNET_IDS }} \
            SecurityGroupId=${{ secrets.SECURITY_GROUP_ID }} \
          --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM
